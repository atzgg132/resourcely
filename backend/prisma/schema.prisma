// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Defines the possible roles for a user
enum Role {
  MEMBER
  ADMIN
  SUPERADMIN
  PENDING_ADMIN
}

// User Model
model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?  // Optional name field
  password      String
  role          Role     @default(MEMBER)
  creditBalance Int      @default(100) // Add this line
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bookings Booking[]
  creditRequests CreditRequest[]
  waitingListEntries WaitingListEntry[]
}

// Resource Model
model Resource {
  id              String   @id @default(cuid())
  name            String
  description     String
  location        String?
  costPerHour     Int // Storing credits as an integer
  minBookingMinutes Int      @default(30)
  maxBookingMinutes Int      @default(240)
  requiresApproval Boolean  @default(false)
  operatingHoursStart Int      @default(480) // 8:00 AM
  operatingHoursEnd   Int      @default(1320) // 10:00 PM
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  bookings Booking[]
  waitingListEntries WaitingListEntry[]
}

// Booking model
model Booking {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  creditsDeducted Int

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([resourceId])
}

// Credit Request Model
model CreditRequest {
  id        String   @id @default(cuid())
  amount    Int
  reason    String
  status    String   @default("PENDING") // PENDING, APPROVED, DENIED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WaitingListEntry {
  id            String   @id @default(cuid())
  
  // The specific time slot the user is waiting for
  slotStartTime DateTime 

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, resourceId, slotStartTime]) // A user can only be on the list once for a specific slot
  @@index([resourceId, slotStartTime])
}
